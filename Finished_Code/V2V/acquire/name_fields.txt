# Naming conventions are stored in a text file. The format of this file is as follows:
# Each line is one of a comment, a blank line, a field entry, an option entry, or the end of file marker line.
#
# Comment lines start with '#' and are ignored.
#     # This is a comment. I can write anything here.
# Note: comment lines are not preserved when a member of this class overwrites the naming convention file.
#
# Field entries start with '$' and are in this format:
#     $ [default value] [separator] [field name]
# Where each item is exactly one word, aside from the field name, which can be any number of words.
# The default value must be a code for one of the options listed below this field.
# The separator here cannot be empty, but if an empty separator in the name is desired use the string "`" here.
# Field entries should appear in the order in which their codes are used for the naming convention.
#
# Option entries start with '-' and are in this format:
#     - [option code] [option name]
# Where option code is exactly one word and option name is any number of words.
# Option entries are listed under the field which they are options for.
#
# The end of file marker line is mandatory and consists of exactly `~`:
#     ~
# Behavior is undefined if this line is not present or if there exist lines in the file after this line.
#
# If any line begins with a character other than these four options (leading whitespace and empty lines
# are ignored), the naming convention class will be unable to read the naming convention file.



$ dry-run ` Test Point
- dry-run Dry Run
- test-point-A-V2V Test Point A
- test-point-B-V2V Test Point B
- test-point-C-Lindsey Test Point C
- test-point-D-Lindsey Test Point D
- test-point-E-Lindsey Test Point E
- test-point-F-V2V Test Point F
- test-point-G-V2V Test Point G
- test-point-H-V2V Test Point H
- test-point-I-V2V Test Point I
- test-point-J-V2V Test Point J
~